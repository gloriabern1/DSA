Given an integer array nums, return the length of the longest strictly increasing
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

 

Constraints:

    1 <= nums.length <= 2500
    -104 <= nums[i] <= 104

//solution using dynamic programming  https://www.youtube.com/watch?v=aPQY__2H3tE
//Time complexity of 0(n^2)
//spaces complecity of 0(n)

/**
 * @param {number[]} nums
 * @return {number}
 */
var lengthOfLIS = function(nums) {
//object for caching the Longest increasing subsequence(LIS) for all index .
    let Lis={0:1};

    for(let i =1; i<nums.length; i++){
      //variable to track all index from the beginning of the array whose value is less than nums[i]
        let j=0;
      //Array to hold the LIS length of all index whose values is less than nums[i]
        let Len=[0];
      //inner loop to iterate from j=0 to before i
       while(j<i){
        //Only push Lis length for index whose values are less than nums[i]
        if(nums[j]<nums[i]){
            Len.push(Lis[j]);
        }
        j++;
       }
//Calculate the Lis length for new index of i. Using the max all LiS length of previous indices whose values are less than nums[i] +1 ;
       Lis[i]= 1 + Math.max(...Len);
        console.log('Lis', Lis);
    }

//return max Lis
    return Math.max(...Object.values(Lis));
};



//Solution with binary serach tree
//Time complexity of 0(nlogn)

/**
 * @param {number[]} nums
 * @return {number}
 */
var lengthOfLIS = function(nums) {
    if (nums.length === 0) return 0;
    //Use to store the longest valid subsequence.
   let seq= [];
   function bst(num){

   let left =0;
   let right= seq.length-1;
//    This loop continues until left equals right, which gives the correct position to replace the element in sub.
   while(left<right){
    let mid=Math.floor((left+right)/2);
        if(seq[mid]<num){
             left=mid+1;
        }
        else{
            right=mid
           
        }
   }
//    Replaces the element at the position left with num. This ensures sub remains sorted and maintains the smallest possible tail values for increasing subsequences.
 seq[left]=num;
}

   for(let i=0; i<nums.length; i++){
//     If sub is empty or the current number num is greater than the last element in sub, append num to sub.
// Otherwise, find the correct position to replace an element in sub to maintain the property of sub being the smallest possible tail values for increasing subsequences.
    if(seq.length===0 || seq[seq.length-1]<nums[i]){
        seq.push(nums[i]);
    }
    else{
        bst(nums[i]);
    }
   }
//    Returns the length of sub, which represents the length of the longest increasing subsequence.
 return seq.length;
};

