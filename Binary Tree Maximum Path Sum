A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

 

Example 1:

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

 

Constraints:

    The number of nodes in the tree is in the range [1, 3 * 104].
    -1000 <= Node.val <= 1000




/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxPathSum = function(root) {
    var maxsum=root.val;
    function sumPath (node){
        var leftnode= 0;
        var rightnode=0;

      if(node.left!==null){
        leftnode= sumPath(node.left)};
      if(node.right!==null){
        rightnode= sumPath(node.right)
        };
        //becase a node val can be negative, we need to get the maxbtw the val and 0, so the node val will not be add to other nodes, if it is negative
        leftnode= Math.max(leftnode, 0);
        rightnode= Math.max(rightnode, 0)
        //sum of the node including the left and right node. 
        //checking if its a valid maz with the current max
         maxsum= Math.max(maxsum, node.val+leftnode+rightnode);
        //return value, is without a split, as its wither the left node sum or the right node sum
        return Math.max(node.val+leftnode , node.val+rightnode)
    }
    sumPath(root);
    return maxsum;
};
