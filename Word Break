Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false

 

Constraints:

    1 <= s.length <= 300
    1 <= wordDict.length <= 1000
    1 <= wordDict[i].length <= 20
    s and wordDict[i] consist of only lowercase English letters.
    All the strings of wordDict are unique.



//Using dynamic programming https://www.youtube.com/watch?v=Sx9NNgInc3A
// Time complexity 0(nXm)
// space 0(n)
/**
 * @param {string} s
 * @param {string[]} wordDict
 * @return {boolean}
 */
var wordBreak = function (s, wordDict) {

    let len = s.length;
    //We'll create a boolean array wordindex where wordindex[i] will be true if the substring s[i.. s.length] can be segmented into words in the wordDict. We'll initialize wordindex[s.length] to true because an empty string can always be segmented.
    let wordindex = { [len]: true };

    for (let i = len - 1; i >= 0; --i) {
        //Set an index to false in the boolean array
        wordindex[i] = false;
        //get substring at i
        let sub = s.substring(i);
        //loop through all the words in the dictionary to see is any match the substring
        for (let w of wordDict) {
            //if length of substring is greater than or equal to words. And if the substring starts with any of the word in the wordDict
            if (sub.length >= w.length && sub.startsWith(w)) {
              //
                wordindex[i] = wordindex[i + w.length];
                if (wordindex[i] === true) { break; }
            }

        }

    }
    return wordindex[0];
};
