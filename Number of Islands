
Editorial
Editorial
Accepted
Accepted
Solutions
Solutions
Submissions
Submissions
Code
Testcase
Testcase
Test Result
200. Number of Islands
Solved
Medium
Topics
Companies

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 300
    grid[i][j] is '0' or '1'.





//optimal solution for iterative BFS and DFS without using a vistited object
/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
    //let visited={};
    let IslandCount=0;
    function bfs(row,col){
        queue=[[row,col]];
         grid[row][col]=0;
        while(queue.length>0){
           // Changing queue.shift() to Queue.pop(), changes the BFS funtion to a DFS
            let [r, c]= queue.shift();
           
            //four possible directions
            let direction= [[1,0],[-1,0], [0,1], [0,-1]]
            for(let dir of direction){
                let x= r+dir[0];
                let y= c+dir[1];
                if(x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] =='1' ){
                    queue.push([x,y])
                     grid[x][y]=0;
                }
            }
        }
    }
    for(let i=0; i<grid.length; i++)
    {
        for(let j=0; j<grid[i].length; j++){
           
            if(grid[i][j]=='1'){
              bfs(i, j);
                IslandCount++
            }

        }
    }

    return IslandCount;
};


    Time complexity : O(M×N) where M is the number of rows and
    N is the number of columns.

    Space complexity : worst case O(M×N) in case that the grid map
    is filled with lands where DFS goes by M×N deep.


//Solution of iterative BFS and DFS using visited Object
/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
    let visited={};
    let IslandCount=0;
    function bfs(row,col){
        queue=[[row,col]];
         visited[row+','+col]=true;
        while(queue.length>0){
            console.log('visited', visited)
            console.log('queue', queue)
            let [r, c]= queue.shift();
           
            //four possible directions
            let direction= [[1,0],[-1,0], [0,1], [0,-1]]
            for(let dir of direction){
                let x= r+dir[0];
                let y= c+dir[1];
                if(x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && !visited[x+','+y] && grid[x][y] ==1 ){
                    queue.push([x,y])
                     visited[x+','+y]=true;
                }
            }
        }
    }
    for(let i=0; i<grid.length; i++)
    {
        for(let j=0; j<grid[i].length; j++){
            let cell=i+','+j;
            if(!visited[cell] && grid[i][j]=='1'){
              bfs(i, j);
                IslandCount++
            }

        }
    }

    return IslandCount;
};

//less optimal recursive DFS solution
/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
    //let visited={};
    let IslandCount=0;
    //using less optimal recursive DFS solution
    function DFS(row,col){
        //Set the current cell to 0 to signify it has been visited
         grid[row][col]=0;
           
            //four possible directions
            let direction= [[1,0],[-1,0], [0,1], [0,-1]]
            for(let dir of direction){
                let x= row+dir[0];
                let y= col+dir[1];
                if(x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] =='1' ){
                    //Set the current cell to 0 to signify it has been visited
                     grid[x][y]=0;
                     //travers the valid not with dfs
                     DFS(x,y)
                }
            }
    }
    for(let i=0; i<grid.length; i++)
    {
        for(let j=0; j<grid[i].length; j++){
           
            if(grid[i][j]=='1'){
              DFS(i, j);
                IslandCount++
            }

        }
    }

    return IslandCount;
};
