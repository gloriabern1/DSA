/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    return validateDFS(root, null, null)
};
//Top down approach using depth first saerch(DFS)
function validateDFS(root, low, high){

if(root == null) return true;

if((low!=null && root.val <= low) || (high !=null && root.val>=high)){return false;}

return validateDFS(root.left, low, root.val) && validateDFS(root.right, root.val, high);
}


//Inorder traversal approach
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    return inOrderValidate(root, null);
};

function inOrderValidate(root, prev){
    if(root== null) return true;
    if(!inOrderValidate(root.left, prev)){return false};
    if(prev!=null && prev>=root.val){return false}
    prev=root.val;
    return inOrderValidate(root.right, prev);
}
