Given the root of a binary tree, return the zigzag level order traversal of its nodes' values.
(i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []




/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var zigzagLevelOrder = function(root) {
    let result=[];
//orderleft indicates if the data should be read from the left node or from the right node
    function bfs(node, level, orderleft ){
    if(result.length===level) {
        result.push([]);}
        
    if(orderleft){
        result[level].push(node.val);
    }
    else{
//if the data is to be read from the right node, we need to append each item to the 
//beginning of the result array that level, 
//Because we are starting from the left node(line 51) regardless.
        result[level].unshift(node.val);
    }
    if(node.left!==null)bfs(node.left, level+1, !orderleft);
    if(node.right!==null)bfs(node.right, level+1, !orderleft);
    }
    if(root!==null)bfs(root, 0, true);
    return result;
    
};

 
