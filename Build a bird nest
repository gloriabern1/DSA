You are helping the bird build its nest. You are given an array forest , 
containing positive integers and zeros, and a non-negative integer bird,
representing the bird's initial position. Each positive integer within the forest is  
considered to be a stick, where the forest [i] represents the length of the ith stick.
 Each zero within  forest[i] represents that this place is empty.
Initially, the bird is located at forest [bird] , which is guaranteed to be zero
. The bird builds its nest, following the algorithm:
• The bird flies to the right until it finds a stick;
• The bird flies back to its initial position and attaches the found stick to the nest;
• The bird repeats steps one and two, but changes the flight direction 
- it now flies to the left;
• The bird will repeat steps one and two, changing to the opposite direction each time,
 until the total length ofthe sticks in the nest reaches 100 
 It is guaranteed that the total length of all sticks in the forest is greater or equal
  to 100. 
More formally, it is  guaranteed that sum(forest) > 100 The forest is large,
 so we can safely guarantee that the bird will never reach the end of the forest 
 during the process. More formally, if you follow the algorithm, you will never meet
  any of these situations.
. The bird flies to the right, but forest[i]= 0 for every i > bird -.
• The bird flies to the left, but forest [i] =0 for every i < bird
  Follow the process and return the array containing 0  based indices within the 
initial forest array of every stick found by the bird, sorted in the order in which 
it found them.
Note: You are not expected to provide the most optimal solution, but a solution 
with time complexity not worse than 0(forest.Length)will fit within the execution time
 limit.Example.For forest = [250, 50, 0, 0, 0, 0, 15, 0, 0, 45] and bird =4 
the output should be solution(forest, bird)= [7,2,10]

//Time complexity 0(n), space complexity 0(n)
function BuildNest(forest, bird) {
   
   let left=bird-1;
   let right= bird+1;
   let sum=0;
   let output=[];
   let IsRight=true;
   
   while(!(left < 0) && !(right > forest.length)){
   if(sum ==100) break;
   if(forest[right]!=0 && sum <100){
    if(IsRight){
     sum+=forest[right];
     output.push(right);
     IsRight=false;
     right+=1
    }
    
   }
   else{right+=1}
   
   if(forest[left]!=0){
    if(!IsRight && sum<100){
     sum+=forest[left];
     output.push(left);
     IsRight= true;
     left-=1;
    }
   }
   else{left-=1}
   
   
   
   }


    return output;
}

const forest = [25, 0, 50, 0,0,0,0, 15, 0,0, 45];
const bird = 4;

let output = BuildNest(forest, bird);
console.log(output);
