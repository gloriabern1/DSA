

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between 
two nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself).”

 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1

 

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {TreeNode}
 */
var lowestCommonAncestor = function(root, p, q) {

        //using dfs to check the left and right branch of a node
    function dfs(node){
        if(!node) return null;
        //base case
        if(node.val===p.val || node.val===q.val) {
        return node};
        //returns node that is equal to p or q from the left branch
         let left=dfs(node.left);;
         let right= dfs(node.right);

        //checks if the left and right branch returns a value, then the LCA is the parent node.
        if(left && right) {return node;}
        //If only one branch returns a value then the LCA is itself.
        else if(left) {return left}
        else if(right){return right;}
        //returns null if a value does not exist in any of the branch in the current node
        else {return null}
    }

    return dfs(root);
    
};
