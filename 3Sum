Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.



/**
 * @param {number[]} nums
 * @return {number[][]}
 */

//time complexity0(n^2), space complexity 0(n)
var threeSum = function(nums) {
    if(nums.length==0) {return [];}
    //sort to understand the whether going forward or backward would give 0
    nums=nums.sort((a,b)=>a-b);
    let res=[];
  //Solution using three pointers i, j, k. where i is static while we moving j and k
    for(let i=0; i<nums.length-2; i++){
        //to reemove duplicate triplets
        if(i>0 && nums[i]===nums[i-1]) {continue;}

        let j=i+1;
        let k= nums.length-1;

        while(j < k){
            let sum= nums[i]+ nums[j]+nums[k];

            if(sum===0)
            {
            res.push([nums[i], nums[j], nums[k]]);
            j++;
            k--;
             //to remove duplicate triplets
             while(j < k && nums[j]===nums[j-1]) {j++;}
            
            }
            else if(sum<0){
                j++;
            }else{
                k--;
            }
        }
    }
    return res;
};