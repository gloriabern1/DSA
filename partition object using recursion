
write a recursive function that counts the number of ways you can partition n objects using parts up to m (assumming m>0)
function countPartitions(n, m) {
    // Base case: if n is 0, there's exactly one way to partition it (using no parts)
    if (n === 0) {
        return 1;
    }
    // If n is negative, there are no ways to partition it
    if (n < 0) {
        return 0;
    }
    // If m is 0 and n is positive, there are no ways to partition it
    if (m === 0 && n > 0) {
        return 0;
    }
    // Recursive case: sum of partitions including and excluding m
    return countPartitions(n - m, m) + countPartitions(n, m - 1);
}

// Example usage:
const n = 5;
const m = 3;
console.log(countPartitions(n, m)); // Output: 5

// Log to console
console.log(getNumberofPartitions(9,5));
